HW 07 Web Scraping, Excel, PDF, Word, JSON, CSV
CH 11 Debugging
Exceptions are raised with a raise statement.
In code, a raise statement consists of the following:

- The raise keyword
- A call to the Exception() function
- A string with a helpful error message passed to the Exception() function

#1
**Intro to 'raise' command**
>>> raise Exception('This is the error message.')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
Exception: This is the error message.

If there are no 'try' and 'except' statements covering the raise statement that raised the exception,
the program simply crashes and displays the exception’s error message.

Often it’s the code that calls the function,
rather than the function itself,
that knows how to handle an exception.
That means you will commonly see a raise statement inside a function and the try and except statements in the code calling the function.

#2
**Output of boxPrint.py**
$ python boxPrint.py
****
*  *
*  *
****
OOOOOOOOOOOOOOOOOOOO
O                  O
O                  O
O                  O
OOOOOOOOOOOOOOOOOOOO
An exception happened: Width must be greater than 2.
An exception happened: Symbol must be a single character string.

Here we’ve defined a boxPrint() function that takes a character, a width, and a height,
and uses the character to make a little picture of a box with that width and height.
This box shape is printed to the screen.

Say we want the character to be a single character, and the width and height to be greater than 2.
We add if statements to raise exceptions if these requirements aren’t satisfied.
Later, when we call boxPrint() with various arguments, our try/except will handle invalid arguments.

This program uses the except Exception as err form of the except statement ➍.
If an Exception object is returned from boxPrint() ➊ ➋ ➌, this except statement will store it in a variable named err.
We can then convert the Exception object to a string by passing it to str() to produce a user-friendly error message ➎.

#3
**Tracebacks as a string**
When Python encounters an error, it produces a treasure trove of error information called the traceback.
The traceback includes the error message, the line number of the line that caused the error, and the sequence of the function calls that led to the error.
This sequence of calls is called the call stack.

$ python errorExample.py
Traceback (most recent call last):
  File "errorExample.py", line 7, in <module>
    spam()
  File "errorExample.py", line 2, in spam
    bacon()
  File "errorExample.py", line 5, in bacon
    raise Exception('This is the error message.')
Exception: This is the error message.

- From the traceback, you can see that the error happened on line 5, in the bacon() function.
  This particular call to bacon() came from line 2, in the spam() function, which in turn was called on line 7.
  In programs where functions can be called from multiple places, the call stack can help you determine which call led to the error.

#4
**Import 'traceback'**
Python displays the traceback whenever a raised exception goes unhandled.
But you can also obtain it as a string by calling traceback.format_exc().
This function is useful if you want the information from an exception’s traceback but also want an except statement to gracefully handle the exception.
You will need to import Python’s traceback module before calling this function.

For example, instead of crashing your program right when an exception occurs,
you can write the traceback information to a text file and keep your program running.
You can look at the text file later, when you’re ready to debug your program.

>>> import traceback
>>> try:
...     raise Exception('This is the error message.')
... except:
...     errorFile = open('errorInfo.txt','w')
...     errorFile.write(traceback.format_exc())
...     errorFile.close()
...     print('The traceback info was written to errorInfo.txt.')
...
111
The traceback info was written to errorInfo.txt.

- The 111 is the return value from the write() method, since 111 characters were written to the file.
  The traceback text was written to errorInfo.txt.

#5
**Assertions**
An assertion is a sanity check to make sure your code isn’t doing something obviously wrong.
These sanity checks are performed by assert statements.
If the sanity check fails, then an AssertionError exception is raised.
In code, an assert statement consists of the following:

- The assert keyword
- A condition (that is, an expression that evaluates to True or False)
- A comma
- A string to display when the condition is False
In plain English, an assert statement says,
“I assert that the condition holds true, and if not, there is a bug somewhere, so immediately stop the program.”

>>> ages = [26, 57, 92, 54, 22, 15, 17, 80, 47, 73]
>>> ages.sort()
>>> ages
[15, 17, 22, 26, 47, 54, 57, 73, 80, 92]
>>> assert
ages[0] <= ages[-1] # Assert that the first age is <= the last age.

- The assert statement here asserts that the first item in ages should be less than or equal to the last one.
  This is a sanity check; if the code in sort() is bug-free and did its job, then the assertion would be true.
  Because the ages[0] <= ages[-1] expression evaluates to True, the assert statement does nothing.

#6
**'reverse' bugging**
However, let’s pretend we had a bug in our code.
Say we accidentally called the reverse() list method instead of the sort() list method.
When we enter the following in the interactive shell, the assert statement raises an AssertionError:

>>> ages = [26, 57, 92, 54, 22, 15, 17, 80, 47, 73]
>>> ages.reverse()
>>> ages
[73, 47, 80, 17, 15, 22, 54, 92, 57, 26]
>>> assert ages[0] <= ages[-1] # Assert that the first age is <= the last age.
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AssertionError

Unlike exceptions, your code should not handle assert statements with try and except; if an assert fails, your program should crash.
By “failing fast” like this, you shorten the time between the original cause of the bug and when you first notice the bug.
This will reduce the amount of code you will have to check before finding the bug’s cause.

Assertions are for programmer errors, not user errors.
Assertions should only fail while the program is under development; a user should never see an assertion error in a finished program.
For errors that your program can run into as a normal part of its operation (such as a file not being found or the user entering invalid data), raise an exception instead of detecting it with an assert statement.
You shouldn’t use assert statements in place of raising exceptions, because users can choose to turn off assertions.
  - If you run a Python script with python -O myscript.py instead of python myscript.py,
    Python will skip assert statements. Users might disable assertions when they’re developing a program and need to run it in a production setting that requires peak performance.
    (Though, in many cases, they’ll leave assertions enabled even then.)
#7
**Assertion in a Traffic Light Simulation**
Say you’re building a traffic light simulation program.
The data structure representing the stoplights at an intersection is a dictionary with keys 'ns' and 'ew',
for the stoplights facing north-south and east-west, respectively.
The values at these keys will be one of the strings 'green', 'yellow', or 'red'.
- tried to create similar file types. See carSim.py and Lights.py

With this assertion in place, your program would crash with this error message:

   Traceback (most recent call last):
     File "carSim.py", line 14, in <module>
       switchLights(market_2nd)
     File "carSim.py", line 13, in switchLights
       assert 'red' in stoplight.values(), 'Neither light is red! ' +
   str(stoplight)
➊ AssertionError: Neither light is red! {'ns': 'yellow', 'ew': 'green'}

The important line here is the AssertionError ➊. While your program crashing is not ideal, it immediately points out that a sanity check failed:
neither direction of traffic has a red light, meaning that traffic could be going both ways. By failing fast early in the program’s execution, you can save yourself a lot of future debugging effort.

#8
**Logging**
If you’ve ever put a print() statement in your code to output some variable’s value while your program is running, you’ve used a form of logging to debug your code.
Logging is a great way to understand what’s happening in your program and in what order it’s happening.
Python’s logging module makes it easy to create a record of custom messages that you write.
These log messages will describe when the program execution has reached the logging function call and list any variables you have specified at that point in time.
On the other hand, a missing log message indicates a part of the code was skipped and never executed.

Add this to the top of your program to enable the logging module to display log messages on your screen as your program runs
import logging
logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s -  %(levelname)
s -  %(message)s')
  - when Python logs an event, it creates a LogRecord object that holds information about that event.
    The logging module’s basicConfig() function lets you specify what details about the LogRecord object you want to see and how you want those details displayed.

In factorialLog.py we use the logging.debug() function when we want to print log information.
This debug() function will call basicConfig(), and a line of information will be printed.
This information will be in the format we specified in basicConfig() and will include the messages we passed to debug().
The print(factorial(5)) call is part of the original program, so the result is displayed even if logging messages are disabled.

Output before fix
$ python factorialLog.py
2020-03-26 18:58:12,736 -  DEBUG-  Start of program
2020-03-26 18:58:12,736 -  DEBUG-  Start of factorial(5%)
2020-03-26 18:58:12,736 -  DEBUG-  i is 0, total is 0
2020-03-26 18:58:12,737 -  DEBUG-  i is 1, total is 0
2020-03-26 18:58:12,737 -  DEBUG-  i is 2, total is 0
2020-03-26 18:58:12,737 -  DEBUG-  i is 3, total is 0
2020-03-26 18:58:12,737 -  DEBUG-  i is 4, total is 0
2020-03-26 18:58:12,738 -  DEBUG-  i is 5, total is 0
2020-03-26 18:58:12,738 -  DEBUG-  End of factorial(5%)
2020-03-26 18:58:12,738 -  DEBUG-  End of program
0

The factorial() function is returning 0 as the factorial of 5, which isn’t right.
The for loop should be multiplying the value in total by the numbers from 1 to 5.
But the log messages displayed by logging.debug() show that the i variable is starting at 0 instead of 1.
Since zero times anything is zero, the rest of the iterations also have the wrong value for total.
Logging messages provide a trail of breadcrumbs that can help you figure out when things started to go wrong.
Change the for i in range(n + 1): line to for i in range(1, n + 1):

$ python factorialLog.py
2020-03-26 19:01:11,204 -  DEBUG-  Start of program
2020-03-26 19:01:11,206 -  DEBUG-  Start of factorial(5%)
2020-03-26 19:01:11,206 -  DEBUG-  i is 1, total is 1
2020-03-26 19:01:11,208 -  DEBUG-  i is 2, total is 2
2020-03-26 19:01:11,208 -  DEBUG-  i is 3, total is 6
2020-03-26 19:01:11,208 -  DEBUG-  i is 4, total is 24
2020-03-26 19:01:11,209 -  DEBUG-  i is 5, total is 120
2020-03-26 19:01:11,209 -  DEBUG-  End of factorial(5%)
2020-03-26 19:01:11,209 -  DEBUG-  End of program
120

The factorial(5) call correctly returns 120.
The log messages showed what was going on inside the loop, which led straight to the bug.
You can see that the logging.debug() calls printed out not just the strings passed to them but also a timestamp and the word DEBUG.

#9
**Don't debug with 'print()'**
Once you’re done debugging, you’ll end up spending a lot of time removing print() calls from your code for each log message.
You might even accidentally remove some print() calls that were being used for nonlog messages.
The nice thing about log messages is that you’re free to fill your program with as many as you like, and you can always disable them later by adding a single logging.disable(logging.CRITICAL) call.
Unlike print(), the logging module makes it easy to switch between showing and hiding log messages.

Log messages are intended for the programmer, not the user.
The user won’t care about the contents of some dictionary value you need to see to help with debugging; use a log message for something like that.
For messages that the user will want to see, like File not found or Invalid input, please enter a number, you should use a print() call.
You don’t want to deprive the user of useful information after you’ve disabled log messages.

#10
**Logging Levels**
Logging levels provide a way to categorize your log messages by importance. Messages can be logged at each level using a different logging function.
Least important
DEBUG
logging.debug()
The lowest level. Used for small details.
Usually you care about these messages only when diagnosing problems.

INFO
logging.info()
Used to record information on general events in your program
or confirm that things are working at their point in the program.

WARNING
logging.warning()
Used to indicate a potential problem that
doesn’t prevent the program from working but might do so in the future.

ERROR
logging.error()
Used to record an error that caused the program to fail to do something.

CRITICAL
logging.critical()
The highest level.
Used to indicate a fatal error that has caused or is about to cause the program to stop running entirely.
Most important

Your logging message is passed as a string to these functions.
The logging levels are suggestions.
Ultimately, it is up to you to decide which category your log message falls into.

>>> import logging
>>> logging.basicConfig(level=logging.DEBUG,format='%(asctime)s - %(levelname)s - %(message)s')
>>> logging.debug('Some debugging details.')
2020-03-26 19:45:08,754 - DEBUG - Some debugging details.
>>> logging.info('The logging module is working.')
2020-03-26 19:46:23,698 - INFO - The logging module is working.
>>> logging.warning('An error message is about to be logged.')
2020-03-26 19:47:14,084 - WARNING - An error message is about to be logged.
>>> logging.error('An error has occured.')
2020-03-26 19:47:50,627 - ERROR - An error has occured.
>>> logging.critical('The program is unable to recover!')
2020-03-26 19:48:19,976 - CRITICAL - The program is unable to recover!

The benefit of logging levels is that you can change what priority of logging message you want to see.
Passing logging.DEBUG to the basicConfig() function’s level keyword argument will show messages from all the logging levels (DEBUG being the lowest level).
But after developing your program some more, you may be interested only in errors.
In that case, you can set basicConfig()’s level argument to logging.ERROR.
This will show only ERROR and CRITICAL messages and skip the DEBUG, INFO, and WARNING messages.

#11
**Disabling Logging**
The logging.disable() function disables these so that you don’t have to go into your program and remove all the logging calls by hand.
You simply pass logging.disable() a logging level, and it will suppress all log messages at that level or lower.
So if you want to disable logging entirely, just add logging.disable(logging.CRITICAL) to your program.

>>> import logging
>>> logging.basicConfig(level=logging.INFO,format='%(asctime)s - %(levelname)s - %(message)s')
>>> logging.critical('Critical error! Critical error!')
2020-03-26 19:57:03,234 - CRITICAL - Critical error! Critical error!
>>> logging.disable(logging.CRITICAL)
>>> logging.critical('Critical error! Critical error!')
>>> logging.error('Error! Error!')

Since logging.disable() will disable all messages after it, you will probably want to add it near the import logging line of code in your program.
This way, you can easily find it to comment out or uncomment that call to enable or disable logging messages as needed.

#12
**Logging to a file**
Instead of displaying the log messages to the screen, you can write them to a text file.
The logging.basicConfig() function takes a filename keyword argument.

import logging
logging.basicConfig(filename='myProgramLog.txt', level=logging.DEBUG, format='
%(asctime)s -  %(levelname)s -  %(message)s')

The log messages will be saved to myProgramLog.txt.
While logging messages are helpful, they can clutter your screen and make it hard to read the program’s output.
Writing the logging messages to a file will keep your screen clear and store the messages so you can read them after running the program.

#13
**Dubugging a Number Adding Program**
File without debugger enabled
$ python buggyAddingProgram.py
Enter the first number to add:
5
Enter the second number to add:
7
Enter the third number to add:
23
The sum is 5723

#14
**Breakpoints**
A breakpoint can be set on a specific line of code and forces the debugger to pause whenever the program execution reaches that line.
$ python coinFlip.py
Halfway done!
Heads came up 490 times.
